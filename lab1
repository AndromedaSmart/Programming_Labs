#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

class Point { 
private:
	double x;
	double y;

public:
	Point() {
		x = 0.0;
		y = 0.0;
	}

	Point(double valueX, double valueY) 
		: x(valueX), y(valueY) {}

	Point(const Point& a) 
		: x(a.GetX()), y(a.GetY()) {}

	Point& operator = (const Point& a) {
		x = a.GetX();
		y = a.GetY();
	}

	void SetX(double valueX) {
		x = valueX;
	}
	void SetY(double valueY) {
		y = valueY;
	}

	double GetX() const {
		return x;
	}

	double GetY() const {
		return y;
	}

	virtual void Print() {
		cout << "x = " << x << "\n y = " << y << endl;
	}
};

class Broken {
protected:
	vector <Point> vecBroken;

public:
	Broken(vector <Point>& a) 
		: vecBroken(a) {}

	void Print() {
		int size = vecBroken.size();
		for (int i = 0; i < size; i++) {
			cout << vecBroken[i].GetX() << " " << vecBroken[i].GetY() << endl;
		}
	}

	double Perimetr() {
		int size = vecBroken.size();
		double Per;
		for (int i = 0; i < size - 1; i++) {
			double a = vecBroken[i + 1].GetX() - vecBroken[i].GetX();
			double b = vecBroken[i + 1].GetY() - vecBroken[i].GetY();
			Per = sqrt(pow(a, 2) + pow(b, 2));
		}
		return Per;
	}

	~Broken() {
		vecBroken.clear();
	}
};

class CloseBroken : public Broken {
public:
	CloseBroken(vector <Point>& a) 
		: Broken (a) {}

	double Perimeter() {
		int size = vecBroken.size();
		double Per;
		for (int i = 0; i < size; i++) {
			double a = vecBroken[i + 1].GetX() - vecBroken[i].GetX();
			double b = vecBroken[i + 1].GetY() - vecBroken[i].GetY();
			Per = sqrt(pow(a, 2) + pow(b, 2));
		}
		return Per;
	}
};

class Polygon {
protected:
	vector <Point> vecPoly;

public:

	Polygon() = default;

	Polygon(vector <Point>& a)
		: vecPoly(a) {};

	void PrintPolyc() {
		int size = vecPoly.size();
		for (int i = 0; i < size; i++) {
			cout << vecPoly[i].GetX() << " " << vecPoly[i].GetY() << "\n";
		}
		cout << endl;
	}

	double Perimeter() {
		int size = vecPoly.size();
		double Per;
		for (int i = 0; i < size; i++) {
			double a = vecPoly[i + 1].GetX() - vecPoly[i].GetX();
			double b = vecPoly[i + 1].GetY() - vecPoly[i].GetY();
			Per = sqrt(pow(a, 2) + pow(b, 2));
		}
		return Per;
	}

	double Square() {
		double piece3;
		double S = 0;

		int size = vecPoly.size();
		for (int i = 0; i < size - 1; ++i) {
			double piece1 = vecPoly[i].GetX() * vecPoly[i + 1].GetY();
			double piece2 = vecPoly[i + 1].GetX() * vecPoly[i].GetY();
			piece3 = piece1 - piece2;
		}
		S = 0.5 * abs(piece3 + vecPoly[size - 1].GetX() * vecPoly[0].GetY() - vecPoly[0].GetX() * vecPoly[size - 1].GetX());
		return S;
	}
};

class Triangle : public Polygon {
public:
	Triangle() = default;
	Triangle(vector<Point>& points) {
		if (points.size() != 3) {
			cout << "Not 3 points!";
		}
	}
};

class Trapezoid : public Polygon {
public:
	Trapezoid() = default;
};

class RightPolygon : public Polygon {
public:
	RightPolygon() = default;
};


int main() {
	Point p1(12, 13);
	Point p2 = p1;
	p1.Print();
	p2.Print();
	vector <Point> brok = {{1, 1},{5, 5},{7, 1}};
	Broken m1(brok);
	m1.Print();
	vector <Point> brok2 = { {1, 1},{5, 5},{7, 1} };
	CloseBroken m2(brok2);
	m2.Print();
	vector <Point> brok3 = { {0,0},{0,1},{1,1},{2,0.5},{1,0} };
	Polygon m4(brok3);
	cout << m4.Square();


	return 0;
}
