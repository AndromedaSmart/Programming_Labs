#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

class Point{
public:
    float x = 0,
    float y = 0;
    Point():x(0), y(0){};
    Point(float _x, float _y):x(_x),y(_y){};
    Point(int _x, int _y):x(_x),y(_y){};
    Point(const Point &t):x(t.x), y(t.y){};
    void operator=(const Point &t){
        x=t.x;
        y=t.y;
    };
    Point operator+(Point &a){
        Point t;
        t.x = x+a.x;
        t.y = y+a.y;
        return t;
    };
    ~Point(){}
};
class Broken{
protected:
    static float TYER(Point &a, Point &b){
        return sqrt(pow((a.x-b.x),2)+pow((a.y-b.y),2));
    }
public:
    vector<Point> v;
    Broken()= default;;
    explicit Broken(vector<Point> &m):v(m){};
    Broken(Broken &p): v(p.v){};
    virtual float getLenght(){
        float t=0;
        for(int i=0;i<v.size()-1;i++)
            t+=frompointtopoint(v[i],v[i+1]);
        return t;
    };
    ~Broken()=default;;
};
class LockBroken: public Broken{
public:
    LockBroken()= default;;
    LockBroken(vector<Point> &m):Broken(m){};

    LockBroken(Broken &p):Broken(p){};
    float getLenght() override{
        float t=Broken::getLenght();
        t+=frompointtopoint(v[0],v[v.size()-1]);
        return t;
    };
    ~LockBroken()=default;;
};
class polygon{
public:
    vector <Point> v;
    float area{}, perimeter{};
    explicit polygon(vector<Point> &m):v(m){};
    polygon(polygon &p):v(p.v){};

    void Area(){
        for (size_t i = 0; i < v.size(); ++i)
        {
            if(i != v.size() - 1)
                area += (v[i].x * v[i + 1].y - v[i].x * v[i + 1].x);
            else
                area += (v[i].x * v[0].y - v[i].y * v[0].x);
        }
        area = abs(area)/2;
        cout << "Площадь = " << area;
    }
    void Perimeter(){
        for (size_t i = 0; i < v.size(); ++i)
            perimeter+= sqrt(pow(v[i].x - v[i + 1].x, 2) + pow(v[i].y - v[i + 1].y, 2));
        cout << "Периметр = " << perimeter << endl;
    }
};
class trapezoid{
public:
    vector<Point> v;
    float a, b, c, d;
    float area, perimeter;
    void sides(){
        d = sqrt(pow((v[1].x - v[0].x), 2) + pow((v[1].y - v[0].y), 2));
        a = sqrt(pow((v[2].x - v[1].x), 2) + pow((v[2].y - v[1].y), 2));
        c = sqrt(pow((v[2].x- v[3].x), 2) + pow((v[2].y - v[3].y), 2));
        b = sqrt(pow((v[3].x - v[0].x), 2) + pow((v[3].y - v[0].y), 2));
    };

    explicit trapezoid(vector<Point> arr){
        for (size_t i = 0; i < 4; ++i){
            cout << arr[i].x << ' ' << arr[i].y << endl;
            v.push_back(arr[i]);
            sides();
        }
    };

    void Area(){
        area = (a+b)/2*sqrt(pow(c,2)-pow((pow(b-a,2)+pow(c,2)-pow(d,2), 2)/2*(b-a), 2));
        cout << "Площадь =" << area <<endl;
    };

    void Perimeter(){
        perimeter = a + b + c + d;
        cout << "Периметр = " << endl;
    };
};

class Triangle: public polygon{};
class RegularPolygon: public polygon{};
