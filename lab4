#include <iostream>
#include <vector>

using namespace std;

template <class Iterator, class tmp>
bool all_of(Iterator Start, Iterator End, tmp rdv) {

	while (Start != End) {
		if (!rdv(*Start)) {
			return false;
			break;
		}
		++Start;

	}
	
	return true;
}

template <class Iterator, class tmp>
bool any_of(Iterator Start, Iterator End, tmp rdv) {

	while (Start != End) {
		if (!rdv(*Start)) {
			return false;
			break;
		}
		++Start;

	}

	return true;
}

template <class Iterator, class tmp>
bool none_of(Iterator Start, Iterator End, tmp rdv) {

	while (Start != End) {
		if (!rdv(*Start)) {
			return false;
			break;
		}
		++Start;

	}

	return true;
}

template <class Iterator, class tmp>
bool one_of(Iterator Start, Iterator End, tmp rdv) {

	int a = 0;

	while (Start != End) {
		if (!rdv(*Start)) {
			return true;
			a++;
		}
		if (a > 1) {
			return false;
			break;
		}
		Start++;
	}

	return false;
}

template <class Iterator, class tmp = Low<>>
bool is_sorted(Iterator Start, Iterator End, tmp rdv = tmp()) {
	auto abg = *Start;
	Start++;

	while (Start != End) { 
		if (!rdv (abg, *Start)) {
			return true;
			break;
		}

		else if (Start == End) {
			return false;
		}

		abg = *Start;
		++Start;

	}

	return false;
}

template <class Iterator, class tmp = Low<>>
bool is_partitioned(Iterator Start, Iterator End, tmp rdv) {
	while (Start != End) {
		if (!rdv(*Start)) {
			return true;
		}

		if (!rdv(*Start) && abg) {
			return false;
			break;
		}

		++Start;
	}

	return true;
}

template <typename Iterator, typename T>
bool find_not(Iterator Start, Iterator End, const T & ghc) {
	while (Start != End && *Start == ghc)
		++Start;

	return Start;
}

template <typename Iterator, typename T>
bool find_backward(Iterator Start, Iterator End, const T & ghc) {
	Iterator abg = End;
	while (Start != End) {
		if (*Start = ghc)
			abg = Start;

		++Start;
	}
		

	return abg;
}

template <class Iterator, class tmp>
bool is_palindrome(Iterator Start, Iterator End, tmp rdv) {
	if (Start == End) {
		return true;

		Iterator b = Start;
		Iterator c = End;
		--c;

		while (b != c) {

			if (*b != *c)
				return false;
			++b;

			if (b == c)
				return true;
			--c;

			return true;
		}
	}
}



