#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

class Num {
public:
    Num()=default;;

    Num(int _coefficient, int _power) : coefficient(_coefficient), power(_power) {};
    float coefficient;
    float power;

    bool operator==(const Num &t) const {
        return (this->coefficient == t.coefficient && this->power == t.power);
    };
    bool operator!=(const Num &t) const {
        return (this->coefficient != t.coefficient || this->power != t.power);
    };
    bool operator<(const Num &t) const {
        return (this->power < t.power);
    };

    bool operator>(const Num &t) const {
        return (this->power > t.power);
    };

    ~Num()= default;
};

class Polynomial{
public:
    vector<Num> v;

    explicit Polynomial(const vector<Num> &m): v(m){
        sort(v.begin(), v.end());
    };

    Polynomial(const Polynomial &t): v(t.v){
        sort(v.begin(), v.end());
    }
    Polynomial() = default;;

    Polynomial& operator=(const Polynomial &t)= default;;

    bool operator==(const Polynomial&t) const{
        return (this->v == t.v);
    };

    bool operator!=(const Polynomial&t) const{
        return (this->v != t.v);
    };

    Polynomial operator+(const Polynomial& t) const{
        Polynomial y(*this);
        t = y(*this);
        
        return y;
    }

    Polynomial operator-(const Polynomial&t) const{
        Polynomial y(*this);
        t = y(*this);
        
        return y;
    }

    Polynomial& operator+=(const Polynomial&t) const{
        for (int i = 0; i < t.v.size(); ++i){
            if (i < this->v.size())
                this->v[i].coefficient += t.v[i].coefficient;
            else
                this->v.push_back(t.v[i]);
        }
        return *this;
    }

    Polynomial& operator-=(const Polynomial&t) const{
        for (int i = 0; i < t.v.size(); ++i){
            if (i < this->v.size())
                this->v[i].coefficient -= t.v[i].coefficient;
            else
                this->v.emplace_back(-t.v[i].coefficient, t.v[i].power);
        }
        return *this;
    };

    Polynomial operator*(const float t) const{
        Polynomial y(*this);
        for (auto & i : y.v)
            i.coefficient *= t;
        return y;
    }

    Polynomial operator/(const float t) const{
        Polynomial y(*this);
        for (auto & i : y.v)
            i.coefficient /= t;
        return y;
    }

    Polynomial& operator*=(const float t) const{
        for (auto & i : this->v)
            i.coefficient *= t;
        return *this;
    }

    Polynomial& operator/=(const float t) const{
        for (auto & i : this->v)
            i.coefficient /= t;
        return *this;
    };
    float & operator[](const int t) const{
        return this->v[t].coefficient;
    }
    friend void operator *= (Polynomial& pol1, Polynomial& pol2);

    ~Polynomial()= default;

    void operator*=(const Polynomial& pol1, const Polynomial& pol2) const {
        vector<Num> v1;
        for (auto i : pol1.v) {
            for (auto j : pol2.v) {
                v1[i.power + j.power].coefficient += pol1.v[i.power].coefficient * pol2.v[j.power].coefficient;
                double x = pol1.v[i.power].coefficient * pol2.v[j.power].coefficient;
            }
        }
        Polynomial polnew(v1);
    }
};
ostream& operator<< (ostream &o,const Polynomial& a){
    for(auto i:a.v)
        o << i.coefficient << ' ' << i.power << endl;
    return o;
}
istream& operator>> (istream &in, Polynomial &a){
    cout << "Введите последовательность:\n";
    float i, k;
    while(cin >> i && cin>>k) {
        a.v.emplace_back(i, k);
    }
    sort(a.v.begin(), a.v.end());
    return in;
}
int main() {
    Polynomial polynomial(vector<Num> {{1,2}, {2,3}});
    cout << polynomial;
}
