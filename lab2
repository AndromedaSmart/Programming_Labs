#include <iostream>
#include <unordered_map>

using namespace std;

class Polynom {
public:
    unordered_map <int, float> polynom;
    Polynom() = default;
    explicit Polynom(const unordered_map <int, float>& vect) : polynom(vect) {}
    Polynom(const Polynom& get) = default;

    Polynom & operator = (const Polynom& get) {
        if (&get == this)
            return *this;
        polynom = get.polynom;
        return *this;
    }
    bool operator == (const Polynom& pol2) const {
        return polynom == pol2.polynom;
    }

    bool operator != (const Polynom& pol2) const {
        return !(polynom == pol2.polynom);
    }


    Polynom& operator += (const Polynom & polynom) {
        for (auto i : polynom.polynom)
            this->polynom[i.first] += polynom.polynom[i.first];
        return *this;
    }
    Polynom operator +(const Polynom & polynom) const{
        Polynom pol(*this);
        pol += polynom;
        return pol;
    }
    Polynom& operator -= (const Polynom& polynom) {
        for (auto i : polynom.polynom)
            this->polynom[i.first] -= polynom.polynom[i.first];
        return *this;
    }
    Polynom operator -(const Polynom & polynom_) const{
        Polynom g(*this);
        g-=polynom_;
        return g;
    }

    Polynom operator*(const float t) const{
        Polynom y(*this);
        for (auto& i : y.polynom)
            i.second *= t;
        return y;
    }

    Polynom operator/(const float t) const{
        Polynom y(*this);
        for (auto& i : y.polynom)
            i.second /= t;
        return y;
    }

    Polynom& operator*=(const float t){
        for (auto& i : this->polynom)
            i.second *= t;
        return *this;
    }

    Polynom& operator/=(const float t){
        for (auto& i : this->polynom)
            i.second /= t;
        return *this;
    };

    float& operator [] (int i) {
        return polynom[i];
    }
    float& operator [] (int i) const{
        return polynom[i];
    }
    friend Polynom operator * (const Polynom& polynom1,const Polynom& polynom2);
    ~Polynom() = default;
};

Polynom operator * (const Polynom& polynom1, const Polynom& polynom2){
    unordered_map <int, float> _polynom;
    for (auto i : polynom1.polynom)
        for (auto j : polynom2.polynom)
            _polynom[i.first + j.first] += polynom1.polynom[i.first] * polynom2.polynom[j.first];
    Polynom polynom_new(_polynom);
    return polynom_new;
}

ostream& operator << (ostream& stream, const Polynom& pol)
{
    for (auto i : pol.polynom) {
        if (pol.polynom[i.first] != 0)
        {
            if (pol.polynom[i.first] < 0)
                stream << pol.polynom[i.first] << "X^" << i.first;
            else
                stream << "+" << pol.polynom[i.first] << "X^" << i.first;
        }
    }
    cout << endl;
    return stream;
}

istream& operator >> (istream& stream, Polynom& pol) {
    int n;
    stream >> n;
    double num;
    int pow;
    for (int i = 0; i < n; i++) {
        stream >> num >> pow;
        pol.polynom[pow] = num;
    }
    return stream;
}
